package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class HashEquiJoin extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private OpIterator[] children;
    HashMap<Object, ArrayList<Tuple>> map;
    private Tuple rt;
    private TupleDesc td;
    private int tuplesInBuffer;
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public HashEquiJoin(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        children = new OpIterator[]{child1, child2};
        tuplesInBuffer = BufferPool.getNumPages()*BufferPool.getPageSize()/child1.getTupleDesc().getSize();
        td = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    public TupleDesc getTupleDesc() {
    	return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public String getJoinField1Name() {
        return children[0].getTupleDesc().getFieldName(getJoinPredicate().getField1());
    }

    public String getJoinField2Name() {
    	return children[1].getTupleDesc().getFieldName(getJoinPredicate().getField2());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
    	child1.open();
    	fillHashMap();
        child2.open();
        super.open();
    }

    public void close() {
    	child1.close();
        child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        rt = null;
    }

    transient Iterator<Tuple> listIt = null;

    // Fills the hash map with as many values fit into the buffer pool.
    public int fillHashMap() throws DbException, TransactionAbortedException {
    	int values = 0;
    	map = new HashMap<Object, ArrayList<Tuple>>();
    	try {
    	while (child1.hasNext() && values <= tuplesInBuffer) {
    		Tuple t = child1.next();
    		ArrayList<Tuple> l = map.get(t.getField(p.getField1()));
    		if (l == null) {
    			l = new ArrayList<Tuple>();
    			map.put(t.getField(p.getField1()), l);
    		}
    		l.add(t);
    		values++;
    	}
		return values;
    	} catch (Exception e) {
    		throw new DbException("Could not fill buffer pool.");
    	}
    }
    
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, there will be two copies of the join attribute in
     * the results. (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    
    //Iterates through the list in the hash map for each field if there is a collision.
    private Tuple fetchNextInList() {
    	
    	Tuple lt = listIt.next();
    	Tuple nt = new Tuple(td);
    	int tdlnum = lt.getTupleDesc().numFields();
    	int tdrnum = rt.getTupleDesc().numFields();
    	for (int i = 0; i < tdlnum; i++)
            nt.setField(i, lt.getField(i));
        for (int i = 0; i < tdrnum; i++)
            nt.setField(tdlnum + i, rt.getField(i));
        return nt;
        
    }
    
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	if (listIt != null && listIt.hasNext()) {
    		return fetchNextInList();
    	}
        while (child2.hasNext()) {
            rt = child2.next();
            ArrayList<Tuple> l = map.get(rt.getField(p.getField2()));
            if (l != null) {
                listIt = l.iterator();
                return fetchNextInList();	
            }
        }	
        child2.rewind();
        // Try to fill the hash map with more values. If it does, reiterate.
        if (fillHashMap() > 0) {
            return fetchNext();
        }
        
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
    	this.child1 = children[0];
        this.child2 = children[1];
        this.children = children;
    }

}
